# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import config_pb2 as config__pb2


class ComunicatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddWorker = channel.unary_unary(
                '/Comunicator/AddWorker',
                request_serializer=config__pb2.Message.SerializeToString,
                response_deserializer=config__pb2.Message.FromString,
                )
        self.RemoveWorker = channel.unary_unary(
                '/Comunicator/RemoveWorker',
                request_serializer=config__pb2.Number.SerializeToString,
                response_deserializer=config__pb2.Message.FromString,
                )
        self.ListWorker = channel.unary_unary(
                '/Comunicator/ListWorker',
                request_serializer=config__pb2.Message.SerializeToString,
                response_deserializer=config__pb2.Message.FromString,
                )
        self.SubmitTask = channel.unary_unary(
                '/Comunicator/SubmitTask',
                request_serializer=config__pb2.Job.SerializeToString,
                response_deserializer=config__pb2.Message.FromString,
                )


class ComunicatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitTask(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ComunicatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.AddWorker,
                    request_deserializer=config__pb2.Message.FromString,
                    response_serializer=config__pb2.Message.SerializeToString,
            ),
            'RemoveWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveWorker,
                    request_deserializer=config__pb2.Number.FromString,
                    response_serializer=config__pb2.Message.SerializeToString,
            ),
            'ListWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorker,
                    request_deserializer=config__pb2.Message.FromString,
                    response_serializer=config__pb2.Message.SerializeToString,
            ),
            'SubmitTask': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTask,
                    request_deserializer=config__pb2.Job.FromString,
                    response_serializer=config__pb2.Message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Comunicator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Comunicator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Comunicator/AddWorker',
            config__pb2.Message.SerializeToString,
            config__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Comunicator/RemoveWorker',
            config__pb2.Number.SerializeToString,
            config__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Comunicator/ListWorker',
            config__pb2.Message.SerializeToString,
            config__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Comunicator/SubmitTask',
            config__pb2.Job.SerializeToString,
            config__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
